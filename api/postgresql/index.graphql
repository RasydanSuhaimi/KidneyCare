# Import your custom resolver
#import "resolvers/authHandler.js"

type Food_log {
  created_at: DateTime!
  food_id: String!
  id: Int!
  kcal: Int
  protein: Float
  cholesterol: Float
  fat: Float
  fiber: Float
  label: String
  user_id: Int!
  mealtype: String
  serving: Int
}

type Users {
  user_id: Int!
  username: String
  email: String
  password: String
  ispersonalinfocomplete: Boolean
}

type Personal_info {
  id: Int
  user_id: Int!
  date_of_birth: Date!
  age: Int!
  gender: String!
  weight: Float!
  height: Float!
  current_gfr: Float!
  stage_gfr: String!
  gfr_month: Date!
  dialysis: Boolean!
  created_at: DateTime
  updated_at: DateTime
}

type Nutrition {
  id: Int
  personal_info_id: Int!
  recommended_calories: Float!
  recommended_protein: Float!
  recommended_potassium: Int!
  recommended_phosphorus: Int!
  recommended_sodium: Int!
  recommended_water: Int!
  created_at: DateTime
  updated_at: DateTime
}

type Water_log {
  id: Int
  user_id: Int!
  water_volume: Float!
  date_log: DateTime
}

type UserResponse {
  user_id: Int
  ispersonalinfocomplete: Boolean
}

type Mutation {
  insert_User(username: String!, email: String!, password: String!): Users
}

type TotalNutrition {
  total_calories: Float
  total_protein: Float
  total_water: Float
}

"""
The following queries are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Query {
  " Queries for type 'Food_log' "
  food_logByFood_id(food_id: String!): [Food_log]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "food_log"
      configuration: "postgresql_config"
    )

  foodLogsForDate(user_id: String!, date: Date!): [Food_log]
    @dbquery(
      type: "postgresql"
      query: "SELECT * FROM food_log WHERE user_id = $1 AND DATE(created_at) = $2;"
      configuration: "postgresql_config"
    )

  food_logByFood_idAndLabel(food_id: String!, label: String!): [Food_log]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "food_log"
      configuration: "postgresql_config"
    )
  food_logList: [Food_log]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "food_log"
      configuration: "postgresql_config"
    )
  food_logPaginatedList(first: Int, after: Int): [Food_log]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "food_id", "id", "kcal", "label", "user_id" FROM "food_log" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )

  signIn(email: String!, password: String!): Users
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "users"
      configuration: "postgresql_config"
    )

  checkUsername(username: String!): Users
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "users"
      configuration: "postgresql_config"
    )

  checkEmail(email: String!): Users
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "users"
      configuration: "postgresql_config"
    )

  GetUserProfile(user_id: Int!): Users
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "users"
      configuration: "postgresql_config"
    )

  getRecommendedNutrition(user_id: Int!): [Nutrition]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT n.recommended_calories, n.recommended_protein,  n.recommended_water, n.personal_info_id
      FROM nutrition n
      JOIN personal_info p ON n.personal_info_id = p.id
      WHERE p.user_id = $1
      """
      configuration: "postgresql_config"
    )

  getTotalNutritionByDate(user_id: Int!): TotalNutrition
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT SUM(kcal) AS total_calories, SUM(protein) AS total_protein
      FROM food_log
      WHERE user_id = $1
      AND DATE(created_at) = CURRENT_DATE
      """
      configuration: "postgresql_config"
    )

  getTotalWaterByDate(user_id: Int!): TotalNutrition
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT SUM(water_volume) AS total_water
      FROM water_log
      WHERE user_id = $1
      AND DATE(date_log) = CURRENT_DATE
      """
      configuration: "postgresql_config"
    )
  getRecommendedWater(user_id: Int!): [Nutrition]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT n.recommended_water, n.personal_info_id
      FROM nutrition n
      JOIN personal_info p ON n.personal_info_id = p.id
      WHERE p.user_id = $1
      """
      configuration: "postgresql_config"
    )

  getWaterVolumeBByDate(user_id: Int!, date_log: DateTime!): [Water_log]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT water_volume, id, date_log
      FROM water_log
      WHERE user_id = $1 AND DATE(date_log) = $2
      """
      configuration: "postgresql_config"
    )
  GetWeeklyNutrients(user_id: Int!): [Food_log]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT created_at, kcal
      FROM food_log
      WHERE user_id = $1
      """
      configuration: "postgresql_config"
    )

  GetMonthlyNutrients(user_id: Int!): [Food_log]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT created_at, kcal
      FROM food_log
      WHERE user_id = $1
      """
      configuration: "postgresql_config"
    )

  GetWeeklyWater(user_id: Int!): [Water_log]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT date_log, water_volume
      FROM water_log
      WHERE user_id = $1
      """
      configuration: "postgresql_config"
    )

  GetMonthlyWater(user_id: Int!): [Water_log]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT date_log, water_volume
      FROM water_log
      WHERE user_id = $1
      """
      configuration: "postgresql_config"
    )
}

"""
The following mutations are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Mutation {
  " Mutations for type 'Food_log' "
  deleteFood_log(id: Int!): Food_log
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "food_log"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertFood_log(
    label: String
    food_id: String
    kcal: Int
    protein: Float
    cholesterol: Float
    fat: Float
    fiber: Float
    user_id: String
    mealtype: String
    serving: Int
    created_at: DateTime!
  ): Food_log
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "food_log"
      dml: INSERT
      configuration: "postgresql_config"
    )

  insert_users(
    username: String!
    email: String!
    password: String!
    ispersonalinfocomplete: Boolean
  ): Users
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "users"
      dml: INSERT
      configuration: "postgresql_config"
    )

  insertPersonal_info(
    user_id: Int!
    date_of_birth: Date!
    age: Int!
    gender: String!
    weight: Float!
    height: Float!
    current_gfr: Float!
    stage_gfr: String!
    gfr_month: Date!
    dialysis: Boolean!
    created_at: DateTime
    updated_at: DateTime
  ): Personal_info
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "personal_info"
      dml: INSERT
      configuration: "postgresql_config"
    )

  insertNutrition(
    personal_info_id: Int!
    recommended_calories: Float!
    recommended_protein: Float!
    recommended_potassium: Int!
    recommended_phosphorus: Int!
    recommended_sodium: Int!
    recommended_water: Int!
    created_at: DateTime
    updated_at: DateTime
  ): Nutrition
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "nutrition"
      dml: INSERT
      configuration: "postgresql_config"
    )

  AddWaterIntake(
    user_id: Int!
    water_volume: Float!
    date_log: DateTime
  ): Water_log
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "water_log"
      dml: INSERT
      configuration: "postgresql_config"
    )

  updatePersonalInfoComplete(user_id: Int!): Users
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE users
      SET ispersonalinfocomplete = true
      WHERE user_id = $1
      RETURNING user_id, ispersonalinfocomplete;
      """
      configuration: "postgresql_config"
    )

  deleteWater_log(id: Int!): Water_log
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "water_log"
      dml: DELETE
      configuration: "postgresql_config"
    )
}
